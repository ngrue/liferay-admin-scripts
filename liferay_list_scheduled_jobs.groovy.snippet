/*
* Copyright (c) 2018 Nicolas GRUE, All rights reserved.
*
* This library is free software; you can redistribute it and/or modify it under
* the terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; either version 2.1 of the License, or (at your option)
* any later version.
*
* This library is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
* FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
* details.
*/

import com.liferay.portal.kernel.log.*;
import com.liferay.portal.kernel.scheduler.*;
import com.liferay.portal.kernel.util.DateUtil;
import java.util.Date;

/*
 * COLUMNS SPECIFICATION
 * available: storage; state; triggerType; configExpression; dateDeb; datePrev; dateNext; jobName; groupName
 */
def SEPARATOR = '; ';
def COLUMNS = 'storage; state; triggerType; configExpression; dateDeb; datePrev; dateNext; jobName; groupName';

/*
 * filter on job names.
 */
def JOBNAME_STARTS_WITH = '';

/*
 * command: pause job matching JOBNAME_STARTS_WITH filter.
 * WARNING it may stop many jobs, if JOBNAME_STARTS_WITH is too short.
 */
def COMMAND_JOB_PAUSE = false  && (JOBNAME_STARTS_WITH.length() > 0);

/*
 * command: resume job matching JOBNAME_STARTS_WITH filter.
 * WARNING it may stop many jobs, if JOBNAME_STARTS_WITH is too short.
 */
def COMMAND_JOB_RESUME = false  && (JOBNAME_STARTS_WITH.length() > 0);


//===========================================


logger = LogFactoryUtil.getLog('com.liferay.scheduler.joblist')
def log = { m -> logger.info(m); println m }

jobs = SchedulerEngineHelperUtil.getScheduledJobs()

log COLUMNS

def cols = COLUMNS.split(SEPARATOR);

jobs.sort{it.trigger.startDate};
jobs = jobs.reverse();

jobs.each { job ->
	def jobName = job.getJobName();
	if ( jobName.startsWith(JOBNAME_STARTS_WITH) ) {
		def storage = job.getStorageType();
	    def state = SchedulerEngineHelperUtil.getJobState(job)
	    def groupName = job.getGroupName();
	    
		dateDebDt = job.trigger.startDate;
	    datePrevDt = job.trigger.wrappedTrigger.previousFireTime;
	    dateNextDt = job.trigger.wrappedTrigger.nextFireTime;
	    formatter = DateUtil.getISO8601Format();
	    def dateDeb = dateDebDt? formatter.format(dateDebDt) : '';
	    def datePrev = datePrevDt? formatter.format(datePrevDt) : '';
	    def dateNext = dateNextDt? formatter.format(dateNextDt) : '';
	    
	    def triggerType = job.trigger.wrappedTrigger.class.simpleName.replace('TriggerImpl','');
	    def triggerTypeIsCron = triggerType.startsWith('Cron');
	    def triggerTypeIsCalInterval = triggerType.startsWith('CalendarInterval');
	    def configExpression = (triggerTypeIsCron? job.trigger.wrappedTrigger.cronExpression : 
				(triggerTypeIsCalInterval? job.trigger.wrappedTrigger.repeatInterval + ' ' + 
					job.trigger.wrappedTrigger.repeatIntervalUnit : '') );
	    
	    def gstr = '';
	    cols.each { col ->
	    	if (gstr.length() > 0) {
	    		gstr += SEPARATOR;
	    	}
	    	if (col.equals('storage')) {
	    	   	gstr += storage;
	    	} else if (col.equals('state')) {
	    	   	gstr += state;
	    	} else if (col.equals('triggerType')) {
	    	   	gstr += triggerType;
	    	} else if (col.equals('configExpression')) {
	    	   	gstr += configExpression;
	    	} else if (col.equals('dateDeb')) {
	    	   	gstr += dateDeb;
	    	} else if (col.equals('datePrev')) {
	    	   	gstr += datePrev;
	    	} else if (col.equals('dateNext')) {
	    	   	gstr += dateNext;
	    	} else if (col.equals('jobName')) {
	    	   	gstr += jobName;
	    	} else if (col.equals('groupName')) {
	    	   	gstr += groupName;
	    	}
	    }
	    log gstr;
		if (COMMAND_JOB_PAUSE) {
			SchedulerEngineHelperUtil.pause(jobName, job.groupName, job.storageType);
		}
		if (COMMAND_JOB_RESUME) {
			SchedulerEngineHelperUtil.resume(jobName, job.groupName, job.storageType);
		}
	}
}
if (COMMAND_JOB_PAUSE) {
	log "Job(s) ${JOBNAME_STARTS_WITH}* is(are) PAUSED";
}
if (COMMAND_JOB_RESUME) {
	log "Job(s) ${JOBNAME_STARTS_WITH}* is(are) RESUMED";
}
